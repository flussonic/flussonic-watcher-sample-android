apply plugin: 'com.android.application'
apply plugin: 'io.fabric' // must be after all plugins

repositories {
    maven { url 'https://raw.github.com/flussonic/flussonic-watcher-sdk-android/master/' }
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    applicationVariants.all { variant ->
        variant.outputs.all {
            def formattedDate = new Date().format("yyyy.MM.dd")
            outputFileName = "${APPLICATION_NAME}_${formattedDate}_v${VERSION_NAME}(${variant.versionCode})_${variant.name}.apk"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            variant.assemble.doLast {
                if (variant.mappingFile && variant.mappingFile.exists()) {
                    copy {
                        from variant.mappingFile
                        into output.outputFile.parent
                        def formattedDate = new Date().format("yyyy.MM.dd")
                        rename { String fileName ->
                            "mapping_${APPLICATION_NAME}_${formattedDate}_v${VERSION_NAME}(${variant.versionCode})_${variant.name}.txt"
                        }
                    }
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "flussonic.watcher.sample"

        minSdkVersion Integer.parseInt(MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(TARGET_SDK_VERSION)
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            // 20:FB:F4:CD:2E:1B:66:22:7A:BA:68:27:91:AB:5E:AE:E0:FE:FF:97
        }
        release {
            // it's not release key
            storeFile file(getSecret('KEYSTORE_FILE'))
            storePassword getSecret('KEYSTORE_PASSWORD')
            keyAlias getSecret('KEY_ALIAS')
            keyPassword getSecret('KEY_PASSWORD')
            // B7:D5:70:AD:AE:41:83:EF:A6:87:05:A5:51:22:1E:2B:3E:58:2D:B6
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '-DEBUG'
            debuggable true
            signingConfig signingConfigs.debug

            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_MINIFY", "${minifyEnabled}"

            ext.enableCrashlytics = false
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "${ext.enableCrashlytics}"
            manifestPlaceholders += [fabricApiKey: "${FABRIC_API_KEY_QA}"]

            buildConfigField "boolean", "PRINT_LOGS_TO_LOGCAT", "true"
        }
        release {
            versionNameSuffix ''
            debuggable false
            signingConfig signingConfigs.release

            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_MINIFY", "${minifyEnabled}"

            ext.enableCrashlytics = false
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "${ext.enableCrashlytics}"
            manifestPlaceholders += [fabricApiKey: "${FABRIC_API_KEY_QA}"]

            buildConfigField "boolean", "PRINT_LOGS_TO_LOGCAT", "true"
        }
    }

    flavorDimensions "server"
    productFlavors {
        demo {
            buildConfigField "String", "SERVER", "\"https://cloud.vsaas.io\""
            buildConfigField "String", "LOGIN", getCredentials("LOGIN", "\"demo\"")
            buildConfigField "String", "PASSWORD", getCredentials("PASSWORD", "\"demo\"")
        }
    }

    lintOptions {
        abortOnError false
    }
}

def getCredentials(String propertyKey, String defaultValue) {
    String propertyValue = getPropertyValue("auth.properties", propertyKey)
    if (!propertyValue || propertyValue.isEmpty()) {
        return defaultValue
    }
    return propertyValue
}

def getSecret(String propertyKey) {
    String propertyValue = getPropertyValue("secret.properties", propertyKey)
    if (!propertyValue || propertyValue.isEmpty()) {
        throw new InvalidUserDataException("You should define KEYSTORE_FILE, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD in secret.properties.")
    }
    return propertyValue
}

def getPropertyValue(String fileName, String propertyKey) {
    try {
        Properties properties = new Properties()
        file(fileName).withInputStream { properties.load(it) }
        return properties[propertyKey]
    } catch (ignored) {
        return null
    }
}

dependencies {
    testImplementation libraries.junit
    androidTestImplementation libraries.testRunner
    androidTestImplementation libraries.espressoCore

    implementation libraries.crashlytics

    implementation libraries.supportDesign
    implementation libraries.supportCardView

    debugImplementation libraries.leakCanary
    releaseImplementation libraries.leakCanaryNoOp

    compileOnly libraries.autoValueGson
    annotationProcessor libraries.autoValueGson

    implementation 'com.flussonic:watcher-sdk:+'
    implementation fileTree(include: ['*.aar'], dir: 'libs')
}
